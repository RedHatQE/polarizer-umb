buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "maven"
    id "maven-publish"
    id "signing"
}

group 'com.github.redhatqe.polarizer'
version '0.1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
sourceCompatibility = 1.8

String mainVerticleName = 'com.github.redhatqe.polarizer.MainVerticle'
String watchForChange = 'src/**/*'
String doOnChange = '/.gradlew classes'
String projectURL = 'https://github.com/RareBreed/polarizer-umb.git'
String devURL = 'git@github.com:RareBreed/polarizer-umb.git'
// String propFile = System.getProperty("user.home") + "/.polarizer/polarizer-project.properties"

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    api group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    api group: 'org.apache.activemq', name: 'activemq-all', version: '5.15.2'
    api group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

    implementation 'com.github.redhatqe.polarizer:reporter:0.2.3-SNAPSHOT'
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.13'
}

// class Creds {
//     public String user
//     public String pw

//     Creds(String u, String p) {
//         this.user = u
//         this.pw = p
//     }
// }

// def getCreds(String polarizePropertyFile) {
//     File f = new File(polarizePropertyFile)
//     Properties props = new Properties()
//     props.load(f.newDataInputStream())
//     return new Creds(props.getProperty("ossrhUsername"), props.getProperty("ossrhPassword"))
// }

// def getCreds(String polarizePropertyFile, String field1, String field2) {
//     File f = new File(polarizePropertyFile)
//     Properties props = new Properties()
//     props.load(f.newDataInputStream())
//     return new Creds(props.getProperty(field1), props.getProperty(field2))
// }

// Creds credsOssrh = getCreds(propFile)

repositories {
    jcenter ()
    mavenLocal()
    // maven {
    //     url 'https://oss.sonatype.org/content/repositories/snapshots/'
    //     credentials {
    //         username credsOssrh.user
    //         password credsOssrh.pw
    //     }
    // }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}


// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar, sourceJar, javadocJar, shadowJar
}

configurations {
    published
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "stoner"
            name "Sean Toner"
            email "stoner@redhat.com"
        }
    }

    scm {
        connection "scm:git:${projectURL}.git"
        developerConnection "scm:git:${devURL}"
        url "${projectURL}"
    }
}

publishing {
    publications {
        // mavenJava(MavenPublication) {
        //     from components.java
        //     artifact sourceJar
        //     artifact javadocJar
        //     artifact shadowJar
        //     groupId project.group
        //     artifactId project.name
        //     version "${version}"
        //     pom.withXml {
        //         def root = asNode()
        //         root.appendNode('description', 'JAXB classes for xunit and testcases, TestNG reporter')
        //         root.appendNode('name', 'polarizer-umb')
        //         root.appendNode('url', "${projectURL}")
        //         root.children().last() + pomConfig
        //     }
        // }
    }
}

uploadArchives {
    repositories {
        // mavenDeployer {
        //     Creds creds = getCreds(propFile)
        //     beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        //     repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        //         authentication(userName: creds.user, password: creds.pw)
        //     }

        //     snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        //         authentication(userName: creds.user, password: creds.pw)
        //     }

        //     pom.project {
        //         name project.name
        //         packaging 'jar'
        //         description 'Library to help with configuration'
        //         url projectURL

        //         scm {
        //             connection "scm:git:${projectURL}.git"
        //             developerConnection "scm:git:${devURL}"
        //             url projectURL
        //         }

        //         licenses {
        //             license {
        //                 name 'The Apache License, Version 2.0'
        //                 url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        //             }
        //         }

        //         developers {
        //             developer {
        //                 id 'stoner'
        //                 name 'Sean Toner'
        //                 email 'stoner@redhat.com'
        //             }
        //         }
        //     }
        // }
    }
}
